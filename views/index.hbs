{{! filepath: d:\ProyectoClimoRRHH\views\index.hbs }}
{{#ifeq nivelUsuario 1}}
<div id="admin-div" class="alert alert-primary text-center">
    {{#if dashboard.periodoActual}}
    <h2 class="mt-2">Período actual: <span class="badge bg-secondary">{{dashboard.periodoActual}}</span></h2>
    {{/if}}
    {{#if dashboard.observacionesPeriodo}}
    <p class="text-muted">{{dashboard.observacionesPeriodo}}</p>
    {{/if}}
    <!-- Dashboard administrador simplificado: solo torta por sector -->
    {{#ifmay dashboard.totalMinutos 0}}
    <div class="container my-4">
        <div class="row g-3 justify-content-center">
            <div class="col-12 col-lg-4">
                <div class="card text-bg-info h-100">
                    <div class="card-body">
                        <h5 class="card-title text-center">Distribución de horas por sector</h5>
                        <div class="d-flex justify-content-center">
                            <canvas id="tortaMinutosSectores" style="max-width:100%; height:auto; cursor:pointer"></canvas>
                        </div>
                        <p class="text-muted mt-2 text-center">Hacé clic para ver el detalle por sector</p>
                    </div>
                </div>
            </div>
            <div class="col-12 col-lg-4">
                <div class="card text-bg-warning h-100">
                    <div class="card-body">
                        <h5 class="card-title text-center">Distribución de horas por motivo</h5>
                        <div class="d-flex justify-content-center">
                            <canvas id="tortaMinutosMotivos" style="max-width:100%; height:auto; cursor:pointer"></canvas>
                        </div>
                        <p class="text-muted mt-2 text-center">Hacé clic para ver el detalle por motivo</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {{else}}
    <div class="container my-4">
        <div class="alert alert-secondary text-center" role="alert">
            No hay novedades para mostrar en el período actual.
        </div>
    </div>
    {{/ifmay}}
    <!-- Gráfico de líneas: evolución últimos 5 meses (siempre visible) -->
    <div class="container my-4">
        <div class="row g-3 justify-content-center mt-1">
            <div class="col-12 col-lg-6">
                <div class="card text-bg-light h-100">
                    <div class="card-body">
                        <h5 class="card-title text-center">Evolución de horas (últimos 5 meses)</h5>
                        <canvas id="lineaHoras" style="max-width:100%; height:auto;"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-12 col-lg-6">
                <div class="card text-bg-light h-100">
                    <div class="card-body">
                        <h5 class="card-title text-center">Importes pagados (últimos 5 meses)</h5>
                        <canvas id="barrasImportes" style="max-width:100%; height:auto;"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Gráfico de torta por sector (en la card de sectores)
            var tortaSectoresData = {{{json dashboard.graficoTortaSectores}}};
            var tortaMotivosData = {{{json dashboard.graficoTortaMotivos}}};
            var lineaHorasData = {{{json dashboard.graficoLineaHoras}}};
            var lineaImportesData = {{{json dashboard.graficoLineaImportes}}};
            var ctxTortaSectores = document.getElementById('tortaMinutosSectores');
            var ctxTortaMotivos = document.getElementById('tortaMinutosMotivos');
            var ctxLineaHoras = document.getElementById('lineaHoras');
            var ctxBarrasImportes = document.getElementById('barrasImportes');
            if (ctxTortaSectores && typeof Chart !== 'undefined' && tortaSectoresData) {
                var colores = [
                    '#0d6efd', '#dc3545', '#198754', '#ffc107', '#20c997',
                    '#6f42c1', '#fd7e14', '#6610f2', '#adb5bd', '#198754',
                    '#e83e8c', '#20c997', '#343a40', '#ffc107', '#6c757d'
                ];
                while (colores.length < tortaSectoresData.labels.length) {
                    colores.push('#' + Math.floor(Math.random()*16777215).toString(16));
                }
                var chartSectores = new Chart(ctxTortaSectores, {
                    type: 'doughnut',
                    data: {
                        labels: tortaSectoresData.labels,
                        datasets: [
                            {
                                data: tortaSectoresData.data,
                                backgroundColor: colores.slice(0, tortaSectoresData.labels.length)
                            }
                        ]
                    },
                    options: {
                        onClick: function() { window.location.href = '/detalleHorasSectores'; },
                        plugins: {
                            legend: { position: 'bottom' },
                            datalabels: {
                                color: '#222',
                                font: { weight: 'bold', size: 13 },
                                formatter: function(value, context) {
                                    var total = (context.chart.data.datasets[0].data || []).reduce(function(a,b){return a+(b||0)},0) || 1;
                                    var pct = Math.round((value/total)*100);
                                    if (value > 0) {
                                        return context.chart.data.labels[context.dataIndex] + ' (' + pct + '%)';
                                    }
                                    return '';
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        var minutos = context.parsed;
                                        var total = (context.dataset.data || []).reduce(function(a,b){return a+(b||0)},0) || 1;
                                        var pct = Math.round((minutos/total)*100);
                                        return context.label + ': ' + minutosAFormato(minutos) + ' (' + pct + '%)';
                                    }
                                }
                            }
                        }
                    },
                    plugins: [ChartDataLabels]
                });
            }
            if (ctxTortaMotivos && typeof Chart !== 'undefined' && tortaMotivosData) {
                var coloresM = [
                    '#0d6efd', '#dc3545', '#198754', '#ffc107', '#20c997',
                    '#6f42c1', '#fd7e14', '#6610f2', '#adb5bd', '#198754',
                    '#e83e8c', '#20c997', '#343a40', '#ffc107', '#6c757d'
                ];
                while (coloresM.length < tortaMotivosData.labels.length) {
                    coloresM.push('#' + Math.floor(Math.random()*16777215).toString(16));
                }
                var chartMotivos = new Chart(ctxTortaMotivos, {
                    type: 'doughnut',
                    data: {
                        labels: tortaMotivosData.labels,
                        datasets: [
                            {
                                data: tortaMotivosData.data,
                                backgroundColor: coloresM.slice(0, tortaMotivosData.labels.length)
                            }
                        ]
                    },
                    options: {
                        onClick: function() { window.location.href = '/detalleHorasMotivos'; },
                        plugins: {
                            legend: { position: 'bottom' },
                            datalabels: {
                                color: '#222',
                                font: { weight: 'bold', size: 13 },
                                formatter: function(value, context) {
                                    var total = (context.chart.data.datasets[0].data || []).reduce(function(a,b){return a+(b||0)},0) || 1;
                                    var pct = Math.round((value/total)*100);
                                    if (value > 0) {
                                        return context.chart.data.labels[context.dataIndex] + ' (' + pct + '%)';
                                    }
                                    return '';
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        var minutos = context.parsed;
                                        var total = (context.dataset.data || []).reduce(function(a,b){return a+(b||0)},0) || 1;
                                        var pct = Math.round((minutos/total)*100);
                                        return context.label + ': ' + minutosAFormato(minutos) + ' (' + pct + '%)';
                                    }
                                }
                            }
                        }
                    },
                    plugins: [ChartDataLabels]
                });
            }

            // Gráfico de líneas (últimos 5 meses)
            if (ctxLineaHoras && typeof Chart !== 'undefined' && lineaHorasData && (lineaHorasData.labels||[]).length) {
                var chartLinea = new Chart(ctxLineaHoras, {
                    type: 'line',
                    data: {
                        labels: lineaHorasData.labels,
                        datasets: [
                            { label: 'Hs 50%', data: lineaHorasData.min50, borderColor: '#0d6efd', backgroundColor: 'rgba(13,110,253,0.15)', tension: 0.2, fill: true },
                            { label: 'Hs 100%', data: lineaHorasData.min100, borderColor: '#dc3545', backgroundColor: 'rgba(220,53,69,0.15)', tension: 0.2, fill: true },
                            { label: 'Total', data: lineaHorasData.total, borderColor: '#198754', backgroundColor: 'rgba(25,135,84,0.15)', tension: 0.2, fill: true }
                        ]
                    },
                    options: {
                        plugins: {
                            legend: { position: 'bottom' },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        var minutos = context.parsed.y || 0;
                                        return context.dataset.label + ': ' + minutosAFormato(minutos);
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                ticks: {
                                    callback: function(value){ return minutosAFormato(value); }
                                }
                            }
                        }
                    }
                });
            }

            // Gráfico de barras de importes (últimos 5 meses)
            if (ctxBarrasImportes && typeof Chart !== 'undefined' && lineaImportesData && (lineaImportesData.labels||[]).length) {
                var chartBarras = new Chart(ctxBarrasImportes, {
                    type: 'bar',
                    data: {
                        labels: lineaImportesData.labels,
                        datasets: [
                            { label: 'Importes pagados', data: lineaImportesData.importes, backgroundColor: 'rgba(13,110,253,0.25)', borderColor: '#0d6efd', borderWidth: 1 }
                        ]
                    },
                    options: {
                        plugins: {
                            legend: { position: 'bottom' },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        var valor = (context.parsed && (context.parsed.y!=null)) ? context.parsed.y : context.parsed;
                                        return context.dataset.label + ': ' + monedaArs(valor||0);
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                ticks: {
                                    callback: function(value){ return monedaArs(value); }
                                }
                            }
                        }
                    }
                });
            }
        });
        function minutosAFormato(minutos) {
            var horas = Math.floor(minutos / 60).toString().padStart(2, '0');
            var mins = (minutos % 60).toString().padStart(2, '0');
            return horas + ':' + mins;
        }
        function monedaArs(valor) {
            try {
                return new Intl.NumberFormat('es-AR', { style: 'currency', currency: 'ARS', minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(Number(valor)||0);
            } catch (e) {
                var n = Number(valor)||0; return '$ ' + n.toFixed(2);
            }
        }
    </script>
</div>
{{/ifeq}}

{{#ifeq nivelUsuario 2}}
<div id="supervisor-div" class="alert alert-success text-center">
    <h2>Bienvenido Supervisor</h2>
    <p>Esta es la vista exclusiva para supervisores.</p>
</div>
{{/ifeq}}

{{#ifeq nivelUsuario 3}}
<div id="usuario-div" class="alert alert-info text-center">
    <h2>Bienvenido Usuario</h2>
    <p>Esta es la vista exclusiva para usuarios.</p>
</div>
{{/ifeq}}

